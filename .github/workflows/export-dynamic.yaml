name: Export Dynamic Plugin Packages
on:
  workflow_call:
    inputs:
      node-version:
        description: node-version to execute the export
        type: string
        required: true
        default: '20.x'

      janus-cli-version:
        description: Version of the janus-idp/cli package.
        type: string
        required: true
        default: '^1.18.0'

      upload-project-on-error:
        description: Upload the complete project as a workflow artifact in case of error in order to troubleshoot.
        required: true
        type: boolean
        default: false
      
      workspace-path:
        description: Relative path of a single workspace on which the export workflow should be applied.
        required: false
        type: string

      plugins-repo:
        description: Target Community Plugins repository to export plugins from
        type: string
        required: true
        default: 'backstage/community-plugins'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest

    name: Prepare
    outputs:
      node-version: ${{ steps.set-env-vars.outputs.NODE_VERSION }}
      janus-cli-version: ${{ steps.set-env-vars.outputs.JANUS_CLI_VERSION }}
      plugins-repo: ${{ steps.set-env-vars.outputs.PLUGINS_REPO }}
      workspaces: ${{ steps.gather-workspaces.outputs.workspaces }}
      upload-project-on-error: ${{ steps.set-env-vars.outputs.UPLOAD_PROJECT_ON_ERROR }}
      overlay-repo-ref: ${{ steps.set-overlay-repo-ref.outputs.OVERLAY_REPO_REF }}

    steps:
      - uses: actions/checkout@v4.2.2
      - name: Set overlay_ref
        id: set-overlay-repo-ref 
        run: |
          echo "OVERLAY_REPO_REF=${{ github.head_ref || github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Set environment variables
        id: set-env-vars
        shell: bash
        run: |
          echo "NODE_VERSION=${{ github.event.inputs.node-version }}" >> $GITHUB_OUTPUT
          echo "UPLOAD_PROJECT_ON_ERROR='${{ github.event.inputs.upload-project-on-error }}'" >> $GITHUB_OUTPUT
          echo "JANUS_CLI_VERSION=${{ github.event.inputs.janus-cli-version }}" >> $GITHUB_OUTPUT
          echo "PLUGINS_REPO=${{ github.event.inputs.plugins-repo }}" >> $GITHUB_OUTPUT

      - name: Gather workspaces
        id: gather-workspaces
        shell: bash
        run: |
          workspacePath=''
          if [[ "${{ github.event.inputs.workspace-path }}" != "" ]]
          then
            workspacePath="${{  github.event.inputs.workspace-path }}"
          elif [[ "${{ github.head_ref }}" == "workspaces/"* ]]
          then
            workspacePath="$(echo '${{ github.head_ref }}' | sed -e 's:workspaces/[^_]*__\(.*\)$:workspaces/\1:')"
          fi

          json=$(
            echo -n '['
            for d in $(find workspaces -mindepth 1 -type d)
            do
              if [[ "${workspacePath}" != "" ]] && [[ "${workspacePath}" != "$d" ]]
              then
                continue
              fi

              if [[ -f "${d}/plugins-list.yaml" ]] && [[ -f "${d}/plugins-repo-ref" ]]
              then
                echo -n "${comma} {\"plugins-root\": \"${d}\", \"plugins-repo-ref\": \"$(cat ${d}/plugins-repo-ref)\"}"
                comma=','
              fi
            done
            echo -n ']'
          )
          echo "Workspaces to export:"
          echo "$json"

          echo "workspaces=${json}" >> $GITHUB_OUTPUT
  export:
    needs: prepare
    uses: redhat-developer/rhdh-plugin-export-utils/.github/workflows/export-dynamic.yaml@main
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJSON(needs.prepare.outputs.workspaces) }}

    with:
      plugins-repo: ${{ needs.prepare.outputs.plugins-repo }}
      plugins-repo-ref: ${{ matrix.workspace.plugins-repo-ref }}
      plugins-root: ${{ matrix.workspace.plugins-root }}
      overlay-repo: ${{ github.repository }}
      overlay-repo-ref: ${{ needs.prepare.outputs.overlay-repo-ref }}
      node-version: ${{ needs.prepare.outputs.node-version }}
      janus-cli-version: ${{ needs.prepare.outputs.janus-cli-version }}
      upload-project-on-error: ${{ needs.prepare.outputs.upload-project-on-error == 'true' }}

    permissions:
      contents: write
